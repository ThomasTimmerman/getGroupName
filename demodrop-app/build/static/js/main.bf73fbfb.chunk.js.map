{"version":3,"sources":["components/todo/AuthenticationService.js","components/todo/AuthenticatedRoute.jsx","components/todo/LoginComponent.jsx","api/todo/TodoDataService.js","components/todo/ListTodosComponent.jsx","components/todo/ErrorComponent.jsx","components/todo/HeaderComponent.jsx","components/todo/FooterComponent.jsx","components/todo/LogoutComponent.jsx","api/todo/HelloWorldService.js","components/todo/WelcomeComponent.jsx","components/todo/TodoComponent.jsx","components/todo/TodoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["username","password","console","log","sessionStorage","setItem","removeItem","getItem","user","AuthenticatedRoute","AuthenticationService","isUserLoggedIn","this","props","to","Component","LoginComponent","state","hasLoginFailed","showSuccesMessage","handleChange","bind","loginClicked","event","setState","target","name","value","registerSuccesfulLogin","history","push","className","type","onChange","onClick","axios","get","ListTodosComponent","todos","message","deleteTodoClicked","updateTodoClicked","addTodoClicked","refreshTodos","nextProps","nextState","getLoggedInUserName","TodoDataService","retrieveAllTodos","then","response","data","id","deleteTodo","class","map","todo","key","description","done","toString","moment","targetDate","format","ErrorComponent","HeaderComponent","href","logout","withRouter","FooterComponent","LogoutComponent","WelcomeComponent","retrieveWelcomeMessage","welcomeMessage","handleSuccessfulResponse","handleError","match","params","HelloWorldService","executeHelloWorldPathVariableService","catch","error","TodoComponent","Date","onSubmit","validate","retrieveTodo","values","errors","length","isValid","createTodo","updateTodo","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","TodoApp","path","exact","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf73fbfb.chunk.js","sourcesContent":["class AuthenticationService {\r\n    registerSuccesfulLogin(username,password){\r\n        console.log('registerSuccesfulLogin')\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user===null) return false\r\n        return true\r\n    }\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user===null) return ''\r\n        return user\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default new AuthenticationService()","import React, {Component} from 'react'\r\nimport AuthenticationService from './AuthenticationService'\r\nimport {Route, Redirect} from 'react-router-dom'\r\n\r\n\r\nclass AuthenticatedRoute extends Component{\r\n    render() {\r\n        if(AuthenticationService.isUserLoggedIn()){\r\n            return <Route {...this.props}/>\r\n        } else {\r\n            return <Redirect to=\"/login\"/>\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthenticatedRoute","import React, {Component} from 'react'\r\nimport AuthenticationService from './AuthenticationService'\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: 'william',\r\n            password: '',\r\n            hasLoginFailed: false,\r\n            showSuccesMessage: false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.loginClicked = this.loginClicked.bind(this)\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState(\r\n            {\r\n                [event.target.name]\r\n                    : event.target.value\r\n            }\r\n        )\r\n    }\r\n\r\n    loginClicked() {\r\n        if (this.state.username === 'william' && this.state.password === 'dummy') {\r\n            AuthenticationService.registerSuccesfulLogin(this.state.username, this.state.password)\r\n            this.props.history.push(`/welcome/${this.state.username}`)\r\n\r\n        }\r\n        else {\r\n            console.log('Failed')\r\n            this.setState({ showSuccesMessage: false })\r\n            this.setState({ hasLoginFailed: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Login</h1>\r\n                <div className=\"container\">\r\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\r\n                    {this.state.showSuccesMessage && <div>Login Succesful</div>}\r\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\r\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}    \r\n\r\nexport default LoginComponent","import axios from 'axios'\r\n\r\nclass TodoDataService {\r\n    retrieveAllTodos(name) {\r\n        //console.log('executed service')\r\n        return axios.get(`http://localhost:8080/users/${name}/todos`);\r\n    }\r\n}\r\n\r\nexport default new TodoDataService()","import React, {Component} from 'react'\r\nimport TodoDataService from '../../api/todo/TodoDataService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\nimport moment from 'moment'\r\n\r\nclass ListTodosComponent extends Component {\r\n\r\n    constructor(props){\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            todos : [],\r\n            message : null\r\n        }\r\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this)   \r\n        this.updateTodoClicked = this.updateTodoClicked.bind(this)   \r\n        this.addTodoClicked = this.addTodoClicked.bind(this)\r\n        this.refreshTodos = this.refreshTodos.bind(this)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount')\r\n    }\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('shouldComponentUpdate')\r\n        console.log(nextProps)\r\n        console.log(nextState)\r\n        return true\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('componentDidMount')\r\n        this.refreshTodos();\r\n        console.log(this.state)\r\n    }\r\n\r\n    refreshTodos() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        TodoDataService.retrieveAllTodos(username)\r\n          .then(\r\n              response => {\r\n                  //console.log(response);\r\n                  this.setState({todos : response.data})\r\n              }\r\n          ) \r\n    }\r\n\r\n    deleteTodoClicked(id) {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        //console.log(id + \" \" + username);\r\n        TodoDataService.deleteTodo(username, id)\r\n         .then (\r\n             response => {\r\n                this.setState({message : `Delete of todo ${id} Successful`})\r\n                this.refreshTodos()\r\n             }\r\n         )\r\n        \r\n    }\r\n\r\n    addTodoClicked() {\r\n        this.props.history.push(`/todos/-1`)\r\n    }\r\n\r\n    updateTodoClicked(id) {\r\n        console.log('update ' + id)\r\n        this.props.history.push(`/todos/${id}`)\r\n        // /todos/${id}\r\n        // let username = AuthenticationService.getLoggedInUserName()\r\n        // //console.log(id + \" \" + username);\r\n        // TodoDataService.deleteTodo(username, id)\r\n        //  .then (\r\n        //      response => {\r\n        //         this.setState({message : `Delete of todo ${id} Successful`})\r\n        //         this.refreshTodos()\r\n        //      }\r\n        //  )\r\n        \r\n    }\r\n\r\n    render() {\r\n        console.log('render')\r\n        return (\r\n            <div>\r\n                 <h1>List Todos</h1>\r\n                 {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\r\n                 <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Description</th>\r\n                                <th>Target Date</th>\r\n                                <th>IsCompleted?</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            this.state.todos.map (\r\n                                todo =>\r\n                                    <tr key={todo.id}>\r\n                                        <td>{todo.description}</td>\r\n                                        <td>{todo.done.toString()}</td>\r\n                                        <td>{moment(todo.targetDate).format('YYYY-MM-DD')}</td>\r\n                                        <td><button className=\"btn btn-success\" onClick={() => this.updateTodoClicked(todo.id)}>Update</button></td>\r\n                                        <td><button className=\"btn btn-warning\" onClick={() => this.deleteTodoClicked(todo.id)}>Delete</button></td>\r\n                                    </tr>\r\n                            )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add</button>\r\n                    </div>\r\n                 </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListTodosComponent","import React from 'react'\r\n\r\nfunction ErrorComponent() {\r\n    return <div>An Error Occurred. Contact Support</div>\r\n}\r\nexport default ErrorComponent","import { withRouter } from 'react-router';\r\nimport React, {Component} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\n\r\nclass HeaderComponent extends Component {\r\n    render() {\r\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n        //console.log(isUserLoggedIn);\r\n\r\n        return (\r\n            <header>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div><a href=\"https://www.hexagonhq.com/\" className=\"navbar-brand\">Hexagon</a></div>\r\n                    <ul className=\"navbar-nav\">\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/welcome/William\">Home</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>}\r\n                    </ul>\r\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\r\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(HeaderComponent);","import React, {Component} from 'react'\r\n\r\nclass FooterComponent extends Component {\r\n    render() {\r\n        return (\r\n            <footer className=\"footer\">\r\n                <span className=\"text-muted\">Deze test is gemaakt door William@2019</span>\r\n\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default FooterComponent","import React, {Component} from 'react'\r\n\r\nclass LogoutComponent extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>You are logged out</h1>\r\n                <div className=\"container\">\r\n                    Thank You for Using Our Application.\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default LogoutComponent","import axios from 'axios'\r\n\r\nclass HelloWorldService {\r\n    \r\n    executeHelloWorldService() {\r\n        //console.log('executed service')\r\n        return axios.get('http://localhost:8080/hello-world');        \r\n    }\r\n\r\n    executeHelloWorldBeanService() {\r\n        //console.log('executed service')\r\n        return axios.get('http://localhost:8080/hello-world-bean');        \r\n    }\r\n\r\n    executeHelloWorldPathVariableService(name) {\r\n        //console.log('executed service')\r\n        return axios.get(`http://localhost:8080/hello-world/path-variable/${name}`);        \r\n    }\r\n}\r\n\r\nexport default new HelloWorldService()","import React, {Component} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport HelloWorldService from '../../api/todo/HelloWorldService.js'\r\n\r\nclass WelcomeComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\r\n        this.state = {\r\n            welcomeMessage : ''\r\n        }\r\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\r\n        this.handleError = this.handleError.bind(this)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Welcome!</h1>\r\n                <div className=\"container\">\r\n                    Welcome {this.props.match.params.name}. \r\n                    You can manage your todos <Link to=\"/todos\">here</Link>.\r\n                </div>\r\n                <div className=\"container\">\r\n                    Click here to get a customized welcome message.\r\n                    <button onClick={this.retrieveWelcomeMessage} \r\n                        className=\"btn btn-success\">Get Welcome Message</button>\r\n                </div>\r\n                <div className=\"container\">\r\n                    {this.state.welcomeMessage}\r\n                </div>\r\n                \r\n            </>\r\n        )        \r\n    }\r\n\r\n    retrieveWelcomeMessage() {\r\n        // HelloWorldService.executeHelloWorldService()\r\n        // .then( response => this.handleSuccessfulResponse(response) )\r\n\r\n        // HelloWorldService.executeHelloWorldBeanService()\r\n        // .then( response => this.handleSuccessfulResponse(response) )\r\n\r\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\r\n        .then( response => this.handleSuccessfulResponse(response) )\r\n        .catch( error => this.handleError(error) )\r\n    }\r\n\r\n    handleSuccessfulResponse(response) {\r\n        console.log(response)\r\n        this.setState({welcomeMessage: response.data.message})\r\n    }\r\n\r\n    handleError(error) {\r\n        console.log(error.response)\r\n        this.setState({welcomeMessage: error.response.data.message})\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default WelcomeComponent","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport TodoDataService from '../../api/todo/TodoDataService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass TodoComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            description: '',\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.state.id === -1) {\r\n            return\r\n        }\r\n\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n\r\n        TodoDataService.retrieveTodo(username, this.state.id)\r\n            .then(response => this.setState({\r\n                description: response.data.description,\r\n                targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\r\n            }))\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = 'Enter a Description'\r\n        } else if (values.description.length < 5) {\r\n            errors.description = 'Enter atleast 5 Characters in Description'\r\n        }\r\n\r\n        if (!moment(values.targetDate).isValid()) {\r\n            errors.targetDate = 'Enter a valid Target Date'\r\n        }\r\n\r\n        return errors\r\n\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n\r\n        let todo = {\r\n            id: this.state.id,\r\n            description: values.description,\r\n            targetDate: values.targetDate\r\n        }\r\n\r\n        if (this.state.id === -1) {\r\n            TodoDataService.createTodo(username, todo)\r\n                .then(() => this.props.history.push('/todos'))\r\n        } else {\r\n            TodoDataService.updateTodo(username, this.state.id, todo)\r\n                .then(() => this.props.history.push('/todos'))\r\n        }\r\n\r\n        console.log(values);\r\n    }\r\n\r\n    render() {\r\n\r\n        let { description, targetDate } = this.state\r\n        //let targetDate = this.state.targetDate\r\n\r\n        return (\r\n            <div>\r\n                <h1>Todo</h1>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ description, targetDate }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"targetDate\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Target Date</label>\r\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoComponent","import React, {Component} from 'react'\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\r\nimport LoginComponent from './LoginComponent.jsx'\r\nimport ListTodosComponent from './ListTodosComponent.jsx'\r\nimport ErrorComponent from './ErrorComponent.jsx'\r\nimport HeaderComponent from './HeaderComponent.jsx'\r\nimport FooterComponent from './FooterComponent.jsx'\r\nimport LogoutComponent from './LogoutComponent.jsx'\r\nimport WelcomeComponent from './WelcomeComponent.jsx'\r\nimport TodoComponent from './TodoComponent.jsx'\r\n\r\nclass TodoApp extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TodoApp\">\r\n                <Router>\r\n                    <>\r\n                        <HeaderComponent/>\r\n                        <Switch>\r\n                            <Route path=\"/\" exact component={LoginComponent}/>\r\n                            <Route path=\"/login\" component={LoginComponent}/>\r\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\r\n                            <AuthenticatedRoute path=\"/todos/:id\" component={TodoComponent}/>\r\n                            <AuthenticatedRoute path=\"/todos\" component={ListTodosComponent}/>\r\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\r\n                            \r\n                            <Route component={ErrorComponent}/>\r\n                        </Switch>\r\n                        <FooterComponent/>\r\n                    </>\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoApp","import React, { Component } from 'react';\nimport TodoApp from './components/todo/TodoApp'\nimport './App.css';\nimport './bootstrap.css';\n \n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <TodoApp/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}